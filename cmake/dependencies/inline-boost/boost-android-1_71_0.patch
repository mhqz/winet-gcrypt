diff -u -r boost_1_71_0.orig/boost/asio/detail/config.hpp boost_1_71_0/boost/asio/detail/config.hpp
--- boost_1_71_0.orig/boost/asio/detail/config.hpp	2019-12-05 16:15:15.632159315 +0100
+++ boost_1_71_0/boost/asio/detail/config.hpp	2019-12-05 16:29:16.818182892 +0100
@@ -825,7 +825,11 @@
 #    if (_LIBCPP_VERSION < 7000)
 #     if (__cplusplus >= 201402)
 #      if __has_include(<experimental/string_view>)
-#       define BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW 1
+#       if __clang_major__ >= 7
+#        undef BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW
+#       else
+#        define BOOST_ASIO_HAS_STD_EXPERIMENTAL_STRING_VIEW 1
+#       endif // __clang_major__ >= 7
 #      endif // __has_include(<experimental/string_view>)
 #     endif // (__cplusplus >= 201402)
 #    endif // (_LIBCPP_VERSION < 7000)
diff -u -r boost_1_71_0.orig/boost/process/detail/posix/wait_for_exit.hpp boost_1_71_0/boost/process/detail/posix/wait_for_exit.hpp
--- boost_1_71_0.orig/boost/process/detail/posix/wait_for_exit.hpp	2019-12-05 16:15:15.708159853 +0100
+++ boost_1_71_0/boost/process/detail/posix/wait_for_exit.hpp	2019-12-05 16:21:23.306782311 +0100
@@ -109,7 +109,7 @@
     do
     {
         auto ts = get_timespec(time_out - Clock::now());
-        auto ret_sig = ::sigtimedwait(&sigset, nullptr, &ts);
+        auto ret_sig = sigtimedwait(&sigset, nullptr, &ts);
         errno = 0;
         ret = ::waitpid(p.pid, &status, WNOHANG);
 
diff -u -r boost_1_71_0.orig/boost/process/detail/posix/wait_group.hpp boost_1_71_0/boost/process/detail/posix/wait_group.hpp
--- boost_1_71_0.orig/boost/process/detail/posix/wait_group.hpp	2019-12-05 16:15:15.708159853 +0100
+++ boost_1_71_0/boost/process/detail/posix/wait_group.hpp	2019-12-05 16:21:54.827008089 +0100
@@ -97,7 +97,7 @@
     do
     {
         auto ts = get_timespec(time_out - Clock::now());
-        ret = ::sigtimedwait(&sigset, nullptr, &ts);
+        ret = sigtimedwait(&sigset, nullptr, &ts);
         errno = 0;
         if ((ret == SIGCHLD) && (old_sig.sa_handler != SIG_DFL) && (old_sig.sa_handler != SIG_IGN))
             old_sig.sa_handler(ret);
diff -u -r boost_1_71_0.orig/libs/filesystem/src/operations.cpp boost_1_71_0/libs/filesystem/src/operations.cpp
--- boost_1_71_0.orig/libs/filesystem/src/operations.cpp	2019-12-05 16:15:14.360150283 +0100
+++ boost_1_71_0/libs/filesystem/src/operations.cpp	2019-12-05 16:27:07.693254039 +0100
@@ -236,6 +236,21 @@
 
 # if defined(BOOST_POSIX_API)
 
+#  if defined(__ANDROID__)
+#  define truncate libboost_truncate_wrapper
+// truncate() is present in Android libc only starting from ABI 21, so here's a simple wrapper
+static int libboost_truncate_wrapper(const char *path, off_t length)
+{
+  int fd = open(path, O_WRONLY);
+  if (fd == -1) {
+    return -1;
+  }
+  int status = ftruncate(fd, length);
+  close(fd);
+  return status;
+}
+#  endif
+
 typedef int err_t;
 
 //  POSIX uses a 0 return to indicate success
diff -u -r boost_1_71_0.orig/libs/filesystem/src/path.cpp boost_1_71_0/libs/filesystem/src/path.cpp
--- boost_1_71_0.orig/libs/filesystem/src/path.cpp	2019-12-05 16:15:14.360150283 +0100
+++ boost_1_71_0/libs/filesystem/src/path.cpp	2019-12-05 16:30:45.846823769 +0100
@@ -38,7 +38,8 @@
 # include "windows_file_codecvt.hpp"
 # include <windows.h>
 #elif defined(macintosh) || defined(__APPLE__) || defined(__APPLE_CC__) \
- || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__HAIKU__)
+ || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__HAIKU__) \
+ || defined(__ANDROID__)
 # include <boost/filesystem/detail/utf8_codecvt_facet.hpp>
 #endif
 
@@ -856,7 +857,8 @@
     std::locale global_loc = std::locale();
     return std::locale(global_loc, new windows_file_codecvt);
 # elif defined(macintosh) || defined(__APPLE__) || defined(__APPLE_CC__) \
-  || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__HAIKU__)
+  || defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__HAIKU__) \
+  || defined(__ANDROID__)
     // "All BSD system functions expect their string parameters to be in UTF-8 encoding
     // and nothing else." See
     // http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPInternational/Articles/FileEncodings.html
diff -u -r boost_1_71_0.orig/tools/build/src/tools/common.jam boost_1_71_0/tools/build/src/tools/common.jam
--- boost_1_71_0.orig/tools/build/src/tools/common.jam	2019-12-05 16:15:15.140155821 +0100
+++ boost_1_71_0/tools/build/src/tools/common.jam	2019-12-05 16:31:21.647081567 +0100
@@ -980,10 +980,10 @@
     }
 
     # Ditto, from Clang 4
-    if ( $(tag) = clang || $(tag) = clangw ) && [ numbers.less 3 $(version[1]) ]
-    {
-        version = $(version[1]) ;
-    }
+    #if ( $(tag) = clang || $(tag) = clangw ) && [ numbers.less 3 $(version[1]) ]
+    #{
+    #    version = $(version[1]) ;
+    #}
 
     # On intel, version is not added, because it does not matter and it is the
     # version of vc used as backend that matters. Ideally, we should encode the
